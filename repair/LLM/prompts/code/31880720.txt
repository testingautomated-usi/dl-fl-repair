```python
    # dataset preparation
    X_train = numpy.array([[1] * 128] * (10**4) + [[0] * 128] * (10**4))
    X_test = numpy.array([[1] * 128] * (10**2) + [[0] * 128] * (10**2))

    Y_train = numpy.array([True] * (10**4) + [False] * (10**4))
    Y_test = numpy.array([True] * (10**2) + [False] * (10**2))

    X_train = X_train.astype("float32")
    X_test = X_test.astype("float32")

    Y_train = Y_train.astype("bool")
    Y_test = Y_test.astype("bool")
    X_test_used, X_test_holdout, y_test_used, y_test_holdout = train_test_split(
        X_test, Y_test, test_size=0.2, random_state=42
    )

    model = Sequential()
    model.add(
        Dense(
            input_dim=128,
            units=50,
            kernel_initializer=config["ki1"],
            bias_initializer=config["bi1"],
        )
    )
    model.add(Activation(config["act1"]))
    model.add(Dropout(0.2))

    for _ in range(config["layer2"]):
        model.add(
            Dense(
                input_dim=50,
                units=50,
                kernel_initializer=config["ki2"],
                bias_initializer=config["bi2"],
            )
        )
    
    model.add(Activation(config["act2"]))
    model.add(Dropout(0.2))
    model.add(
        Dense(
            input_dim=50,
            units=1,
            kernel_initializer=config["ki3"],
            bias_initializer=config["bi3"],
        )
    )
    model.add(Activation(config["act3"]))

    if config["optimizer"] == "sgd":
        optimizer = SGD(lr=config["lr"])
    elif config["optimizer"] == "adam":
        optimizer = Adam(lr=config["lr"])
    elif config["optimizer"] == "rmsprop":
        optimizer = RMSprop(lr=config["lr"])
    elif config["optimizer"] == "adagrad":
        optimizer = Adagrad(lr=config["lr"])
    elif config["optimizer"] == "adadelta":
        optimizer = Adadelta(lr=config["lr"])
    elif config["optimizer"] == "adamax":
        optimizer = Adamax(lr=config["lr"])
    elif config["optimizer"] == "nadam":
        optimizer = Nadam(lr=config["lr"])

    model.compile(loss=config["loss"], optimizer=optimizer, metrics=["accuracy"])
    model.fit(
        X_train,
        Y_train,
        epochs=config["epochs"],
        batch_size=config["batch_size"],
        verbose=0,
    )
```