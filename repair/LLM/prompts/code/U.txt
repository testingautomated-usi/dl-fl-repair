```python
    dataset_folder = ""

    x_img = np.load(os.path.join(dataset_folder, "dataset_x_img.npy"))
    x_head_angles = np.load(
        os.path.join(dataset_folder, "dataset_x_head_angles_np.npy")
    )
    y_gaze_angles = np.load(
        os.path.join(dataset_folder, "dataset_y_gaze_angles_np.npy")
    )

    (
        x_img_train,
        x_img_test,
        x_ha_train,
        x_ha_test,
        y_gaze_train,
        y_gaze_test,
    ) = train_test_split(
        x_img, x_head_angles, y_gaze_angles, test_size=0.2, random_state=42
    )

    (
        x_img_test_used,
        x_img_test_holdout,
        x_ha_test_used,
        x_ha_test_holdout,
        y_gaze_test_used,
        y_gaze_test_holdout,
    ) = train_test_split(
        x_img_test, x_ha_test, y_gaze_test, test_size=0.2, random_state=42
    )

    # Build the model
    image_input = Input((36, 60, 1))
    head_pose_input = Input((2,))

    initialiser_normal = RandomNormal(mean=0.0, stddev=0.1)
    initialiser_const = Constant(value=0)
    initialiser_xavier = GlorotNormal(seed=None)

    for k, v in config.items():
        if v == "initialiser_normal":
            v = initialiser_normal
        elif v == "initialiser_const":
            v = initialiser_const
        elif v == "initialiser_xavier":
            v = initialiser_xavier
        elif v == "angle_loss_fn":
            v = angle_loss_fn
        elif v == "None":
            v = None
        config[k] = v

    x = Conv2D(
        filters=20,
        kernel_size=(5, 5),
        strides=1,
        padding="valid",
        kernel_initializer=config["ki1"],
        bias_initializer=config["bi1"],
        activation=config["act1"],
    )(image_input)

    x = MaxPool2D(strides=2, pool_size=2)(x)

    x = Conv2D(
        filters=50,
        kernel_size=(5, 5),
        strides=1,
        padding="valid",
        kernel_initializer=config["ki2"],
        bias_initializer=config["bi2"],
        activation=config["act2"],
    )(x)

    x = MaxPool2D(strides=2, pool_size=2)(x)

    x = Flatten()(x)
    # relu
    for _ in range(config["layer1"]):
        x = Dense(
            config["unit1"],
            activation=config["act3"],
            kernel_initializer=config["ki3"],
            bias_initializer=config["bi3"]
        )(x)

    x = Concatenate()([head_pose_input, x])

    output = Dense(
        2,
        activation=config["act4"],
        kernel_initializer=config["ki4"],
        bias_initializer=config["bi4"],
    )(x)

    model = Model(inputs=[image_input, head_pose_input], outputs=output)

    if config["optimizer"] == "sgd":
        optimizer = SGD(lr=config["lr"])
    elif config["optimizer"] == "adam":
        optimizer = Adam(lr=config["lr"])
    elif config["optimizer"] == "rmsprop":
        optimizer = RMSprop(lr=config["lr"])
    elif config["optimizer"] == "adagrad":
        optimizer = Adagrad(lr=config["lr"])
    elif config["optimizer"] == "adadelta":
        optimizer = Adadelta(lr=config["lr"])
    elif config["optimizer"] == "adamax":
        optimizer = Adamax(lr=config["lr"])
    elif config["optimizer"] == "nadam":
        optimizer = Nadam(lr=config["lr"])

    model.compile(
        optimizer=optimizer,
        loss=config["loss"],
        metrics=[angle_loss_fn],
    )

    history = model.fit(
        [x_img_train, x_ha_train],
        y_gaze_train,
        batch_size=config["batch_size"],
        epochs=config["epochs"],
        shuffle=True,
        validation_split=0.1,
        verbose=0,
    )
```