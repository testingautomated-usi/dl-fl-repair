```python
    (x_train_init, y_train_init), (x_test, y_test) = reuters.load_data(
        num_words=None, test_split=0.2, seed=42
    )
    word_index = reuters.get_word_index(path="reuters_word_index.json")
    num_classes = max(y_train_init) + 1
    index_to_word = {}
    for key, value in word_index.items():
        index_to_word[value] = key

    max_words = 10000
    tokenizer = Tokenizer(num_words=max_words)
    x_train_init = tokenizer.sequences_to_matrix(x_train_init, mode="binary")
    x_test = tokenizer.sequences_to_matrix(x_test, mode="binary")

    y_train_init = to_categorical(y_train_init, num_classes)
    y_test = to_categorical(y_test, num_classes)

    x_train, x_val, y_train, y_val = train_test_split(
        x_train_init, y_train_init, test_size=0.2, random_state=42
    )
    X_test_used, X_test_holdout, y_test_used, y_test_holdout = train_test_split(
        x_test, y_test, test_size=0.2, random_state=42
    )

    model = Sequential()
    model.add(
        Dense(
            config["unit1"],
            input_shape=(max_words,),
            activation=config["act1"],
            kernel_initializer=config["ki1"],
            bias_initializer=config["bi1"],
        )
    )
    model.add(Dropout(0.5))
    model.add(
        Dense(
            num_classes,
            activation=config["act2"],
            kernel_initializer=config["ki2"],
            bias_initializer=config["bi2"],
        )
    )

    if config["optimizer"] == "sgd":
        optimizer = SGD(lr=config["lr"])
    elif config["optimizer"] == "adam":
        optimizer = Adam(lr=config["lr"])
    elif config["optimizer"] == "rmsprop":
        optimizer = RMSprop(lr=config["lr"])
    elif config["optimizer"] == "adagrad":
        optimizer = Adagrad(lr=config["lr"])
    elif config["optimizer"] == "adadelta":
        optimizer = Adadelta(lr=config["lr"])
    elif config["optimizer"] == "adamax":
        optimizer = Adamax(lr=config["lr"])
    elif config["optimizer"] == "nadam":
        optimizer = Nadam(lr=config["lr"])

    model.compile(loss=config["loss"], optimizer=optimizer, metrics=["accuracy"])

    model.fit(
        x_train,
        y_train,
        batch_size=config["batch_size"],
        epochs=config["epochs"],
        verbose=0,
    )
```